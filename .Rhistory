library(readxl)
library(ggplot2)
library(reshape2)
Dataset <- read_excel("C:/Users/gelbi/Downloads/Questionario_tratado.xlsx")
Dataset <- read_excel("Questionario_tratado.xlsx")
y <- Dataset$V24
y <- ifelse(y < 18,1,0)
y <- na.omit(y)
y <- factor(y)
x <- data.frame(
idade = Dataset$`V01`,
raca = Dataset$`V02`,
sexo = Dataset$`V03`,
religiao = Dataset$`V04`,
zona_residencia = Dataset$`V05`,
ocupacao = Dataset$`V06`,
conhecimento_infracoes = Dataset$`V08`,
concordancia_reabilitacao = Dataset$`V10`,
vitima_infracao = Dataset$`V12`,
conhece_infrator = Dataset$`V13`,
conhecimento_ECA = Dataset$`V25`,
satizfacao_ECA = Dataset$`V26`,
stringsAsFactors = TRUE
)
x <- na.omit(x)
table(y,x$raca)
table(y,x$religiao)
table(y, x$zona_residencia)
table(y, x$conhecimento_ECA)
x$religiao_2 <- ifelse(x$religiao == 'N?o religioso',1,0)
x$raca_pardo <- ifelse(x$raca == "Pardo",1,0)
x$raca_branco <- ifelse(x$raca == "Branco",1,0)
x$raca2<- factor(ifelse(x$raca == "Pardo",1,ifelse(x$raca == "Branco",2,0)))
x$zona_sul <- ifelse(x$zona_residencia == "Zona Sul (Capital - RJ)",1,0)
x$aprofundado <- ifelse(x$conhecimento_ECA == "Possuo conhecimento aprofundado", 1,0)
table(y,x$raca)
plot_bar <- function(df) {
for (col in names(df)) {
if (is.factor(df[[col]]) || is.character(df[[col]])) {
print(
ggplot(df, aes_string(x = col)) +
geom_bar() +
labs(title = paste("Bar Plot of", col)) +
theme_minimal()
)
}
}
}
###
plot_heatmap <- function(df) {
cat_vars <- names(df)[sapply(df, is.factor)]
for (i in 1:(length(cat_vars) - 1)) {
for (j in (i + 1):length(cat_vars)) {
cat_var1 <- cat_vars[i]
cat_var2 <- cat_vars[j]
contingency_table <- table(df[[cat_var1]], df[[cat_var2]])
if (min(dim(contingency_table)) > 1) {  # Certifique-se de que a tabela tenha mais de uma categoria
melted_data <- melt(contingency_table)
colnames(melted_data) <- c(cat_var1, cat_var2, "Freq")
print(
ggplot(melted_data, aes_string(x = cat_var1, y = cat_var2, fill = "Freq")) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = paste("Heatmap of", cat_var1, "and", cat_var2)) +
theme_minimal()
)
}
}
}
}
plot_heatmap(x)
plot_bar(x)
summary(x)
modelo <- glm(y ~ idade + raca_pardo + sexo + religiao_2 + zona_residencia + ocupacao +
conhecimento_infracoes + concordancia_reabilitacao + vitima_infracao + conhece_infrator
+ conhecimento_ECA + satizfacao_ECA, data = x, family = binomial)
summary(modelo)
summary(modelo)
modelo <- glm(y ~ idade + religiao_2 + raca_pardo +
conhecimento_infracoes + concordancia_reabilitacao
, data = x, family = binomial) #Removi Conhece infrator
summary(modelo)
x$religiao_2 <- ifelse(x$religiao == 'N?o religioso',1,0)
modelo <- glm(y ~ idade + religiao_2 + raca_pardo +
conhecimento_infracoes + concordancia_reabilitacao + conhece_infrator
, data = x, family = binomial) #Removi Satizafa??o ECA
summary(modelo)
x$religiao_2 <- ifelse(x$religiao == 'Não religioso',1,0)
Dataset <- read_excel("Questionario_tratado.xlsx")
x <- data.frame(
idade = Dataset$`V01`,
raca = Dataset$`V02`,
sexo = Dataset$`V03`,
religiao = Dataset$`V04`,
zona_residencia = Dataset$`V05`,
ocupacao = Dataset$`V06`,
conhecimento_infracoes = Dataset$`V08`,
concordancia_reabilitacao = Dataset$`V10`,
vitima_infracao = Dataset$`V12`,
conhece_infrator = Dataset$`V13`,
conhecimento_ECA = Dataset$`V25`,
satizfacao_ECA = Dataset$`V26`,
stringsAsFactors = TRUE
)
x <- na.omit(x)
table(y,x$raca)
table(y,x$religiao)
table(y, x$zona_residencia)
table(y, x$conhecimento_ECA)
x$religiao_2 <- ifelse(x$religiao == 'Não religioso',1,0)
View(x)
x$raca_pardo <- ifelse(x$raca == "Pardo",1,0)
x$raca_branco <- ifelse(x$raca == "Branco",1,0)
x$raca2<- factor(ifelse(x$raca == "Pardo",1,ifelse(x$raca == "Branco",2,0)))
x$zona_sul <- ifelse(x$zona_residencia == "Zona Sul (Capital - RJ)",1,0)
x$aprofundado <- ifelse(x$conhecimento_ECA == "Possuo conhecimento aprofundado", 1,0)
modelo <- glm(y ~ idade + religiao_2 + raca_pardo +
conhecimento_infracoes + concordancia_reabilitacao
, data = x, family = binomial) #Removi Conhece infrator
summary(modelo)
modelo3 <- glm(y ~ idade + religiao_2 + raca_pardo +
conhecimento_infracoes + concordancia_reabilitacao
, data = x, family = binomial) #Removi Conhece infrator
summary(x)
modelo <- glm(y ~ idade + raca_pardo + sexo + religiao_2 + zona_residencia + ocupacao +
conhecimento_infracoes + concordancia_reabilitacao + vitima_infracao + conhece_infrator
+ conhecimento_ECA + satizfacao_ECA, data = x, family = binomial)
summary(modelo)
stepwise(modelo)
step(modelo)
boxplot(x$religiao, y)
boxplot(y,x$religiao)
boxplot(y ~ x$religiao)
vif(modelo3)
pacman::p_load(dplyr, psych, car, MASS, DescTools, QuantPsyc, ggplot2)
library(car)
#CARREGAR PACOTES
if(!require(pacman)) install.packages("pacman")
if(!require(lmtest)) install.packages("lmtest")
if(!require(lmtest)) install.packages("readxl")
if(!require(lmtest)) install.packages("dplyr")
if(!require(lmtest)) install.packages("ResourceSelection")
library(ResourceSelection)
pacman::p_load(dplyr, psych, car, MASS, DescTools, QuantPsyc, ggplot2)
vif(modelo3)
modelo4 <- glm(y ~ idade + religiao_2 + raca_pardo +
conhecimento_infracoes + concordancia_reabilitacao
, data = x, family = binomial(link = "logit")) #Removi Conhece infrator
summary(modelo3)
summary(modelo4)
step(modelo, direction = "backward")
modelo <- glm(y ~ idade + raca_pardo + sexo + religiao_2 + zona_residencia + ocupacao +
conhecimento_infracoes + concordancia_reabilitacao + vitima_infracao + conhece_infrator
+ conhecimento_ECA + satizfacao_ECA, data = x, family = binomial)
step(modelo, direction = "backward")
modelo3 <- glm(y ~ idade + religiao_2 + raca_pardo +
conhecimento_infracoes + concordancia_reabilitacao + conhece_infrator
, data = x, family = binomial) #Removi Satizafa??o ECA
modelo4 <- glm(y ~ idade + religiao_2 + raca_pardo +
conhecimento_infracoes + concordancia_reabilitacao
, data = x, family = binomial(link = "logit")) #Removi Conhece infrator
anova(modelo3, modelo4)
anova(modelo3, test="Chisq") #OK ACEITO
anova(modelo4, test="Chisq") #
waldtest(modelo)
waldtest(modelo3)
modelo4 <- glm(y ~ idade + raca_pardo +
conhecimento_infracoes + concordancia_reabilitacao
, data = x, family = binomial(link = "logit")) #Removi Conhece infrator
summary(modelo4)
anova(modelo3, modelo4)
plot(modelo)
anova(modelo4, test="Chisq") #
anova(modelo4, test="Chisq") #
step(modelo, direction = "backward")
modelo4 <- glm(y ~ idade + raca_pardo + sexo + religiao_2
conhecimento_infracoes + concordancia_reabilitacao
summary(modelo4)
modelo4 <- glm(y ~ idade + raca_pardo + sexo + religiao_2
conhecimento_infracoes + concordancia_reabilitacao
summary(modelo4)
modelo4 <- glm(y ~ idade + raca_pardo + sexo + religiao_2 +
conhecimento_infracoes + concordancia_reabilitacao
, data = x, family = binomial(link = "logit")) #Removi Conhece infrator
summary(modelo4)
summary(modelo)
step(modelo, direction = "forward")
step(modelo, direction = "both")
modelo4 <- glm(y ~ sexo +raca_pardo  +
conhecimento_infracoes+ religiao_2 + idade + concordancia_reabilitacao
, data = x, family = binomial(link = "logit")) #Removi Conhece infrator
summary(modelo4)
modelo4 <- glm(y ~ raca_pardo  +
conhecimento_infracoes+ religiao_2 + idade + concordancia_reabilitacao
, data = x, family = binomial(link = "logit")) #Removi Conhece infrator
summary(modelo4)
step(modelo, direction = "backward")
library(lmtest)
waldtest(modelo)
waldtest(modelo, terms = c("disp", "hp"))
waldtest(modelo, terms = c("religiao_2", "raca_pardo"))
linearHypothesis(model)
library(car)
linearHypothesis(model)
linearHypothesis(modelo)
linearHypothesis(modelo, modelo3)
anova(modelo)
anova(glm(y ~ idade + raca_pardo + sexo + religiao_2 + zona_residencia + ocupacao +
conhecimento_infracoes + concordancia_reabilitacao + conhece_infrator
+ conhecimento_ECA + satizfacao_ECA, data = x, family = binomial))
anova(glm(y ~ idade + raca_pardo + sexo + religiao_2 + zona_residencia +
conhecimento_infracoes + concordancia_reabilitacao + conhece_infrator
+ conhecimento_ECA + satizfacao_ECA, data = x, family = binomial))
anova(glm(y ~ idade + raca_pardo + sexo + religiao_2 + zona_residencia +
conhecimento_infracoes + concordancia_reabilitacao + conhece_infrator
+ conhecimento_ECA, data = x, family = binomial))
anova(glm(y ~ idade + raca_pardo + religiao_2 + zona_residencia +
conhecimento_infracoes + concordancia_reabilitacao + conhece_infrator
+ conhecimento_ECA, data = x, family = binomial))
anova(glm(y ~ idade + raca_pardo + religiao_2 + zona_residencia +
conhecimento_infracoes + concordancia_reabilitacao
+ conhecimento_ECA, data = x, family = binomial))
anova(glm(y ~ idade + raca_pardo + religiao_2 + zona_residencia +
conhecimento_infracoes + concordancia_reabilitacao, data = x, family = binomial))
anova(glm(y ~ idade + religiao_2 + zona_residencia +
conhecimento_infracoes + concordancia_reabilitacao, data = x, family = binomial))
modelo <- glm(y ~ idade + raca_pardo + sexo + religiao_2 + zona_residencia + ocupacao +
conhecimento_infracoes + concordancia_reabilitacao + vitima_infracao + conhece_infrator
+ conhecimento_ECA + satizfacao_ECA, data = x, family = binomial)
summary(modelo)
modelo4 <- glm(y ~ raca_pardo  +
conhecimento_infracoes+ religiao_2 + idade + concordancia_reabilitacao
, data = x, family = binomial(link = "logit")) #Removi Conhece infrator
summary(modelo4)
vif(modelo3)
anova(modelo4, test="Chisq") #
anova(modelo3, test="Chisq") #OK ACEITO
summary(modelo3)
summary(modelo4)
modelo4 <- glm(y ~ raca_pardo  +
conhecimento_infracoes+ religiao_2 + idade + concordancia_reabilitacao
, data = x, family = binomial(link = "logit")) #Removi Conhece infrator
summary(modelo4)
table(y,x$raca)
plot_bar <- function(df) {
for (col in names(df)) {
if (is.factor(df[[col]]) || is.character(df[[col]])) {
print(
ggplot(df, aes_string(x = col)) +
geom_bar() +
labs(title = paste("Bar Plot of", col)) +
theme_minimal()
)
}
}
}
####
plot_bar(x$raca)
boxplot(y ~ x$raca)
boxplot(x$raca)
boxplot(y~ x$raca)
barplot(y, x$raca)
barplot(x$raca)
modelo <- glm(y ~ idade + raca_pardo + sexo + religiao_2 + zona_residencia + ocupacao +
conhecimento_infracoes + concordancia_reabilitacao + vitima_infracao + conhece_infrator
+ conhecimento_ECA + satizfacao_ECA, data = x, family = binomial)
barplot([y,x$raca])
barplot(matrix[y,x$raca])
barplot(matrix(y,x$raca))
barplot(data.frame(y,x$raca))
vif(modelo4)
bptest (modelo4 , studentize = FALSE)
shapiro . test ( residuals (modelo4))
shapiro.test(residuals (modelo4))
cor(cbind(x$idade, y))
# Obter coeficientes (em forma de matriz)
coefficients <- summary(modelo4)$coefficients  # Extrai coeficientes do sumário
# Calcular valores de p
p_value <- (1 - pnorm(abs(coefficients[ ,"t value"]), 0, 1)) * 2  # Calcula p-value a partir dos valores t
# Calcular valores de p
p_value <- (1 - pnorm(abs(coefficients[ ,"t value"]), 0, 1)) * 2  # Calcula p-value a partir dos valores t
View(coefficients)
# Calcular valores de p
p_value <- (1 - pnorm(abs(coefficients[ ,"z value"]), 0, 1)) * 2  # Calcula p-value a partir dos valores t
# Vincular valores de p aos coeficientes
coefficients <- cbind(coefficients, p_value)  # Adiciona coluna de p-values à matriz de coeficientes
# Calcular razões de chances
odds_ratio <- exp(coefficients[ ,"Value"])  # Calcula odds ratio exponenciando os coeficientes
View(coefficients)
# Obter coeficientes (em forma de matriz)
coefficients <- summary(modelo4)$coefficients
# Obter coeficientes (em forma de matriz)
coefficients <- summary(modelo4)$coefficients
View(coefficients)
table <- as.matrix(table(y, x$ocupacao))  # Cria uma tabela de contingência para sexo e sobrevivência
contingency_table <- list(Frequency = table, Expected = chisq.test(table)$expected)  # Calcula as frequências observadas e esperadas
contingency_table  # Exibe a tabela de contingência
chisq.test(table, correct = FALSE)  # Realiza o teste qui-quadrado de independência (sem correção de continuidade)
87/117
plot(x$idade, y)
plot( y, x$idade)
plot(y, x$idade, main = "Idade do indivíduo por opinião se ele é a favor da redução da maioridade penal")
plot(y, x$idade, main = "Idade do indivíduo por opinião se ele \n é a favor da redução da maioridade penal")
plot(y, x$idade, main = "Idade do indivíduo por opinião se ele \n é a favor da redução da maioridade penal")
plot(y, x$idade,
main = "Idade do indivíduo por opinião se ele \n é a favor da redução da maioridade penal",
xlab = "Opinião sobre a redução da maioridade penal",
ylab = "Idade")
plot(y, x$idade,
main = "Idade do indivíduo por opinião se ele \n é a favor da redução da maioridade penal",
xlab = "Opinião sobre a redução da maioridade penal",
ylab = "Idade",
xaxt = 'n')  # desativa o eixo x padrão
# Depois, adicione o eixo x com os novos rótulos
axis(1, at = c(0, 1), labels = c("Contra", "A favor"))
plot_bar <- function(df) {
for (col in names(df)) {
if (is.factor(df[[col]]) || is.character(df[[col]])) {
print(
ggplot(df, aes_string(x = col)) +
geom_bar() +
labs(title = paste("Bar Plot of", col)) +
theme_minimal()
)
}
}
}
# Depois, adicione o eixo x com os novos rótulos
axis(1, at = c(0, 1), labels = c("Contra", "A favor"))
plot(y, x$idade,
main = "Idade do indivíduo por opinião se ele \n é a favor da redução da maioridade penal",
xlab = "Opinião sobre a redução da maioridade penal",
ylab = "Idade",
xaxt = 'n')  # desativa o eixo x padrão
# Depois, adicione o eixo x com os novos rótulos
axis(1, at = c(0, 1), labels = c("Contra", "A favor"))
axis(0, at = c(0, 1), labels = c("Contra", "A favor"))
plot(y, x$idade,
main = "Idade do indivíduo por opinião se ele \n é a favor da redução da maioridade penal",
xlab = "Opinião sobre a redução da maioridade penal",
ylab = "Idade")  # desativa o eixo x padrão
# Depois, adicione o eixo x com os novos rótulos
axis(1, at = c(0, 1), labels = c("Contra", "A favor"))
plot(y, x$idade,
main = "Idade do indivíduo por opinião se ele \n é a favor da redução da maioridade penal",
xlab = "Opinião sobre a redução da maioridade penal",
ylab = "Idade",
xaxt = 'n')  # desativa o eixo x padrão
# Depois, adicione o eixo x com os novos rótulos
axis(1, at = c(0, 1), labels = c("Contra", "A favor"))
plot(y, x$idade,
main = "Idade do indivíduo por opinião se ele \n é a favor da redução da maioridade penal",
xlab = "Opinião sobre a redução da maioridade penal",
ylab = "Idade",
xaxt = 'n')  # desativa o eixo x padrão
# Depois, adicione o eixo x com os novos rótulos
axis(1, at = c(0, 1), labels = c("Contra", "A favor"))
# Primeiro, crie o plot sem o eixo x
plot(y, x$idade,
main = "Idade do indivíduo por opinião se ele \n é a favor da redução da maioridade penal",
xlab = "Opinião sobre a redução da maioridade penal",
ylab = "Idade",
xaxt = 'n',  # desativa o eixo x padrão
col = ifelse(y == 1, "blue", "red"))  # colore os pontos
# Depois, adicione o eixo x com os novos rótulos
axis(1, at = c(0, 1), labels = c("Contra", "A favor"))
# Adicione uma legenda para as cores
legend("topright", legend = c("Contra", "A favor"), col = c("red", "blue"), pch = 1)
# Primeiro, crie o plot sem o eixo x
plot(y, x$idade,
main = "Idade do indivíduo por opinião se ele \n é a favor da redução da maioridade penal",
xlab = "Opinião sobre a redução da maioridade penal",
ylab = "Idade",
xaxt = 'n',  # desativa o eixo x padrão
col = ifelse(y == 1, "blue", "red"))  # colore os pontos
# Primeiro, crie o plot sem o eixo x
plot(y, x$idade,
main = "Idade do indivíduo por opinião se ele \n é a favor da redução da maioridade penal",
xlab = "Opinião sobre a redução da maioridade penal",
ylab = "Idade",   # desativa o eixo x padrão
col = ifelse(y == 1, "blue", "red"))  # colore os pontos
# Obter coeficientes (em forma de matriz)
coefficients <- modelo4$coefficients
# Calcula e exibe o coeficiente da idade transformado para odds ratio
exp(coefficients(modelo4)[2])
confint.default(modelo4)
exp(confint.default(modelo4))
# Calcula e exibe o coeficiente da idade transformado para odds ratio
exp(coefficients(modelo4))
# Calcula e exibe o coeficiente da idade transformado para odds ratio
exp(coefficients(modelo4))
lm.influence(modelo4)
### Resíduos de Pearson vs Observações
plot(residuals(result, type = "pearson"), main = "pearson residual plot")
### Resíduos de Pearson vs Observações
plot(residuals(modelo4, type = "pearson"), main = "pearson residual plot")
par(mfrow(c(3,2)))
par(mfrow = c(2,3))
### Resíduos de Pearson vs Observações
plot(residuals(modelo4, type = "pearson"), main = "pearson residual plot")
### Resíduos de Deviance vs Observações
plot(residuals(modelo4, type = "deviance"), main = "deviance residual plot")
### Gráfico dos valores de Hat
plot(hatvalues(modelo4), ylab = "H", xlab = "Case Number Index")
### Gráfico DfBeta para o Intercepto
plot(dfbetas(modelo4)[, 1], ylab = "DFBETA0", xlab = "Case Number Index")
### Gráfico DfBeta para o Intercepto
plot(dfbetas(modelo4)[, 1], ylab = "DFBETA0", xlab = "Case Number Index")
### Gráfico DfBeta para o Coeficiente de Idade
plot(dfbetas(modelo4)[, 2], ylab = "DFBETA1", xlab = "Case Number Index")
par(mfrow = c(3,2))
### Resíduos de Pearson vs Observações
plot(residuals(modelo4, type = "pearson"), main = "pearson residual plot")
### Resíduos de Deviance vs Observações
plot(residuals(modelo4, type = "deviance"), main = "deviance residual plot")
### Gráfico dos valores de Hat
plot(hatvalues(modelo4), ylab = "H", xlab = "Case Number Index")
### Gráfico DfBeta para o Intercepto
plot(dfbetas(modelo4)[, 1], ylab = "DFBETA0", xlab = "Case Number Index")
### Gráfico DfBeta para o Coeficiente de Idade
plot(dfbetas(modelo4)[, 2], ylab = "DFBETA1", xlab = "Case Number Index")
### Gráfico DfBeta para o Coeficiente de Idade
plot(dfbetas(modelo4)[, 2], ylab = "DFBETA1", xlab = "Case Number Index")
par(mfrow = c(1,2))
par(mfrow = c(1,2))
### Resíduos de Pearson vs Observações
plot(residuals(modelo4, type = "pearson"), main = "pearson residual plot")
### Resíduos de Deviance vs Observações
plot(residuals(modelo4, type = "deviance"), main = "deviance residual plot")
par(mfrow = c(1,2))
### Gráfico dos valores de Hat
plot(hatvalues(modelo4), ylab = "H", xlab = "Case Number Index")
### Gráfico DfBeta para o Intercepto
plot(dfbetas(modelo4)[, 1], ylab = "DFBETA0", xlab = "Case Number Index")
### Gráfico DfBeta para o Intercepto
plot(dfbetas(modelo4)[, 1], ylab = "DFBETA0", xlab = "Case Number Index")
### Gráfico DfBeta para o Coeficiente de Idade
plot(dfbetas(modelo4)[, 2], ylab = "DFBETA1", xlab = "Case Number Index")
plot(modelo4)
confint(modelo4)
hoslem.test(y, fitted(modelo4), g = 10)
library("gmodels")
library("psych")
install.packages("gmodels")
install.packages("ResourceSelection")
library(ResourceSelection)
hoslem.test(y, fitted(modelo4), g = 10)
hltest(modelo4, G = 10)
library(glmtoolbox)
install.packages("glmtoolbox")
library(glmtoolbox)
hltest(modelo4, G = 10)
